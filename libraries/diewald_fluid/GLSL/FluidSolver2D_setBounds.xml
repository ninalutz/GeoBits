<!--

  author: thomas diewald
  date: 25.07.2011
  last edited: 25.07.2011
  
  loads GLSL shader: 
    FluidSolver2D_setBounds.frag
  
-->


<filter name="FluidSolver2D_setBounds">
    <description>FluidSolver2D_setBounds</description>
    <fragment>FluidSolver2D_setBounds.frag</fragment>
    <textures input="2" output="1">
        <intexture type="sampler2d" name="tex1_rw_d"    offset="inv_size"    label="tex1_rw_d">0</intexture>     
        <intexture type="sampler2d" name="tex2_objects" offset="tex2_objects_inv_size"  label="tex2_objects">1</intexture>              
    </textures>

    <parameter type="int" name="b" label="b">1</parameter>
    <parameter type="int" name="closed" label="b">0</parameter>
</filter>

<!--



  private void setBounds(int b, float[] rw_d, int[] object){
    // left-right border
//    for (int y = 1; y <= NY_; y++) {
//      d[IDX(    0, y)] =   (b == 1) ? -d[IDX(  1, y)]  :  d[IDX(  1, y)];
//      d[IDX(NX_+1, y)] =   (b == 1) ? -d[IDX(NX_, y)]  :  d[IDX(NX_, y)];
//    }
    
    // top-bottom, border
    for (int x = 1; x <= NX_; x++) {
      rw_d[IDX(x,     0)] =   (b == 2) ? -rw_d[IDX(x,   1)]  :  rw_d[IDX(x,   1)];
      rw_d[IDX(x, NY_+1)] =   (b == 2) ? -rw_d[IDX(x, NY_)]  :  rw_d[IDX(x, NY_)];
    }
    
    //corners
    rw_d[IDX(    0,     0)] = 0.5 * (rw_d[IDX(    0,     1)] + rw_d[IDX(  1,   0)]);
    rw_d[IDX(    0, NY_+1)] = 0.5 * (rw_d[IDX(    1, NY_+1)] + rw_d[IDX(  0, NY_)]);
    rw_d[IDX(NX_+1,     0)] = 0.5 * (rw_d[IDX(NX_+1,     1)] + rw_d[IDX(NX_,   0)]);
    rw_d[IDX(NX_+1, NY_+1)] = 0.5 * (rw_d[IDX(NX_+1, NY_+1)] + rw_d[IDX(NX_, NY_)]);
    
    
    for (int i=1 ; i <= NX_ ; i++ ) {
      for (int j=1 ; j <= NY_ ; j++ ) {
        if ( object[IDX(i, j)] == 2 ) {
          if (b==1) {
            // inverse horizontal velocity at vertical object border
            if (object[IDX(i-1, j)]==0) rw_d[IDX(i, j)] =  -rw_d[IDX(i-1, j)];
            if (object[IDX(i+1, j)]==0) rw_d[IDX(i, j)] =  -rw_d[IDX(i+1, j)];
          } 
          else if (b==2) {
            // inverse vertical velocity at horizontal object border
            if (object[IDX(i, j-1)]==0) rw_d[IDX(i, j)] =  -rw_d[IDX(i, j-1)];
            if (object[IDX(i, j+1)]==0) rw_d[IDX(i, j)] =  -rw_d[IDX(i, j+1)];
          } 
          else if (b==0) {
            // same density as active neighbour for egde-border, 
            // average of two active neighbours for corner-border
            int cnt=0; 
            rw_d[IDX(i, j)] = 0;
            if (object[IDX(i-1, j)]==0) { rw_d[IDX(i, j)] += rw_d[IDX(i-1, j)]; cnt++;  }
            if (object[IDX(i+1, j)]==0) { rw_d[IDX(i, j)] += rw_d[IDX(i+1, j)]; cnt++; }
            if (object[IDX(i, j-1)]==0) { rw_d[IDX(i, j)] += rw_d[IDX(i, j-1)]; cnt++; }
            if (object[IDX(i, j+1)]==0) { rw_d[IDX(i, j)] += rw_d[IDX(i, j+1)]; cnt++; }
            rw_d[IDX(i, j)] /= cnt;
          }
        }
      }
    }
  }
  
  
  
  
-->
